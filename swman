#!/bin/bash

# Sets the variable ID_LIKE containing the most generic
# distribution name.
# Example: ID_LIKE=arch, or ID_LIKE=debian
detectLinuxDistribution() {
  eval `cat /etc/*-release | grep ID_LIKE`
}

# DO NOT CHANGE! This is needed to detect the distribution name.
detectLinuxDistribution

# Arch Linux ARM only. Upgrade to pacbobo if it is present in the system.
detectPacbobo() {
  which pacbobo > /dev/null 2>&1
  if [ $? = 0 ]; then
    pacman=pacbobo
  else
    pacman=pacman
  fi
}

# DO NOT CHANGE! This is needed to detect the pacbobo package manager.
detectPacbobo


# Query if a package is already installed.
packageQuery() {
  local packageName=$1
  if [ $ID_LIKE = arch ]; then
    $pacman -Qi $packageName > /dev/null
    return $?
  fi
  if [ $ID_LIKE = debian ]; then
    dpkg-query -l $packageName | grep "^ii" > /dev/null
    return $?
  fi
  return 0
}

# Update package databases and upgrade system.
packageUpdate() {
  if [ $ID_LIKE = arch ]; then
    $pacman -Syu
  fi
  if [ $ID_LIKE = debian ]; then
    apt-get update
    apt-get upgrade
  fi
}

packageInstall() {
  local packageName=$1
  if [ $ID_LIKE = arch ]; then
    $pacman --noconfirm -S $packageName
    return $?
  fi
  if [ $ID_LIKE = debian ]; then
    apt-get --yes --force-yes -q=2 install $packageName
    return $?
  fi
}

packageUninstall() {
  local packageName=$1
  if [ $ID_LIKE = arch ]; then
    $pacman --noconfirm -R $packageName
    return $?
  fi
  if [ $ID_LIKE = debian ]; then
    apt-get --yes --force-yes -q=2 --purge autoremove $packageName
    return $?
  fi
}

showUsage() {
  cat << EOF
Usage:
$0 [-u] ... update and upgrade all packages
$0 [-i <package-name-list>] ... install packages
$0 [-r <package-name-list>] ... remove packages
EOF
}

while getopts "uir" option; do
  case $option in
  u) packageUpdate;     exit 0 ;;
  i) operation=install;        ;;
  r) operation=remove;         ;;
  ?) showUsage;         exit 1 ;;
  esac
done
shift $(( OPTIND - 1 ))
success=1
for packageName in $*; do
  packageQuery $packageName
  if [ $? != 0 ]; then
    if [ $operation = install ]; then
      packageInstall $packageName
      if [ $? != 0 ]; then
        exit 1
      fi
    fi
  else
    if [ $operation = remove ]; then
      packageUninstall $packageName
      if [ $? != 0 ]; then
        exit 1
      fi
    fi
  fi
  success=0
done
if [ $success != 0 ]; then
  showUsage
  exit 1
fi
exit 0
